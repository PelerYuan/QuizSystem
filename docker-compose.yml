version: '3.8'

services:
  # Main Flask application
  quiz-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quiz-app
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - PYTHONUNBUFFERED=1
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-123456}
    volumes:
      # Persistent data volumes
      - quiz_data:/app/data
      - quiz_uploads:/app/img
      - quiz_files:/app/quiz
      - quiz_results:/app/result
      - quiz_temp:/app/tmp
      # Mount database file
      - ./data.sqlite:/app/data.sqlite
      - ./configure.json:/app/configure.json:ro
    networks:
      - quiz-network
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: quiz-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"  # For HTTPS if configured
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # Static files for direct serving
      - ./static:/app/static:ro
      - quiz_uploads:/app/img:ro
    networks:
      - quiz-network
    depends_on:
      - quiz-app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for session management and caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: quiz-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL (optional upgrade from SQLite for production)
  # Uncomment if you want to use PostgreSQL instead of SQLite
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: quiz-postgres
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: quizdb
  #     POSTGRES_USER: quizuser
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-quizpass123}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - quiz-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U quizuser -d quizdb"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # Monitoring with Prometheus (optional)
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: quiz-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   networks:
  #     - quiz-network

  # Log aggregation with Grafana (optional)
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: quiz-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - quiz-network

networks:
  quiz-network:
    driver: bridge
    name: quiz-network

volumes:
  # Application data volumes
  quiz_data:
    driver: local
    name: quiz_data
  quiz_uploads:
    driver: local
    name: quiz_uploads
  quiz_files:
    driver: local
    name: quiz_files
  quiz_results:
    driver: local
    name: quiz_results
  quiz_temp:
    driver: local
    name: quiz_temp

  # Service data volumes
  redis_data:
    driver: local
    name: quiz_redis_data

  # Optional volumes (uncomment if using)
  # postgres_data:
  #   driver: local
  #   name: quiz_postgres_data
  # prometheus_data:
  #   driver: local
  #   name: quiz_prometheus_data
  # grafana_data:
  #   driver: local
  #   name: quiz_grafana_data